name: E2E - iOS
on:
  workflow_call:
    inputs:
      ios-version:
        required: true
        type: string

jobs:
  ios:
    env:
      # `if` conditions can't directly access secrets, so we use a workaround
      # See https://docs.github.com/en/actions/security-guides/encrypted-secrets#using-encrypted-secrets-in-a-workflow
      SECRETS_AVAILABLE: ${{ secrets.SECRETS_AVAILABLE }}
      BASH_ENV: ~/.profile
    name: iOS (${{ inputs.ios-version  }})
    runs-on: ios-e2e-group
    steps:
      - uses: google-github-actions/auth@v1
        with:
          project_id: celo-mobile-mainnet
          credentials_json: ${{ secrets.MAINNET_SERVICE_ACCOUNT_KEY }}
      - name: Google Secrets
        if: ${{ env.SECRETS_AVAILABLE }}
        id: google-secrets
        uses: google-github-actions/get-secretmanager-secrets@v1.0.1
        with:
          secrets: |-
            EMERGE_API_TOKEN:projects/1027349420744/secrets/EMERGE_API_TOKEN
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
          check-latest: true
      - name: Install package dependencies
        run: yarn || yarn --network-concurrency 1
      - name: Fail if someone forgot to commit "yarn.lock"
        run: git diff --exit-code
      # Since the e2e runners have access to the Valora branding,
      # This check ensures there are no type errors there.
      # The `yarn build` step done in the test workflow also includes it but does it with the default celo branding.
      - name: TS check
        run: yarn build:ts
      - name: Install Ruby dependencies
        run: bundle install --path vendor/bundle
      - name: Fail if someone forgot to commit "Gemfile.lock"
        run: git diff --exit-code
      - name: Install CocoaPods dependencies
        working-directory: ios
        run: bundle exec pod install || bundle exec pod install --repo-update
      - name: Fail if someone forgot to commit "Podfile.lock"
        run: git diff --exit-code
      - name: Check E2E wallet balance
        run: NODE_OPTIONS='--unhandled-rejections=strict' yarn ts-node ./e2e/scripts/check-e2e-wallet-balance.ts
      - name: Create iOS E2E .env File
        working-directory: e2e
        run: echo MOCK_PROVIDER_BASE_URL=${{ secrets.MOCK_PROVIDER_BASE_URL }} >> .env && echo MOCK_PROVIDER_API_KEY=${{ secrets.MOCK_PROVIDER_API_KEY }} >> .env && echo WALLET_CONNECT_PROJECT_ID_E2E=${{ secrets.WALLET_CONNECT_PROJECT_ID_E2E }} >> .env
      - name: Create Detox Build
        run: |
          export CELO_TEST_CONFIG=e2e
          yarn detox build -c ios.release
      - name: Upload Detox Build to Emerge
        if: |
          env.SECRETS_AVAILABLE
            && (github.event_name == 'pull_request' || github.event_name == 'push')
        run: yarn ts-node .github/scripts/uploadE2eBuildToEmerge.ts
        env:
          EMERGE_API_TOKEN: ${{ steps.google-secrets.outputs.EMERGE_API_TOKEN }}
          DETOX_CONFIG: ios.release
      - name: Run Detox
        run: >
          yarn detox test
          --configuration ios.release.${{ inputs.ios-version }}
          --artifacts-location e2e/artifacts
          --take-screenshots=failing
          --record-videos=failing
          --record-logs=failing
          --loglevel info
          --debug-synchronization 10000
          --maxWorkers 6
          --retries 3
        timeout-minutes: 45
      - name: Publish iOS JUnit Report
        if: always()
        uses: mikepenz/action-junit-report@v3
        with:
          check_name: iOS (${{ inputs.ios-version }}) e2e Test Report
          report_paths: 'e2e/test-results/junit.xml'
      - name: 'Upload iOS E2E Artifacts'
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: ios-${{ inputs.ios-version }}-e2e-artifact
          path: e2e/artifacts
      - name: 'Upload iOS E2E HTML Report'
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ios-${{ inputs.ios-version }}-test-report
          path: e2e/test-results
