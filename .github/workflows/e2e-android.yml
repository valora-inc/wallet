name: E2E - Android
on:
  workflow_call:
    inputs:
      android-api-level:
        required: true
        type: number

jobs:
  android:
    env:
      BASH_ENV: ~/.profile
    name: Android (SDK ${{ inputs.android-api-level }})
    runs-on: buildjet-8vcpu-ubuntu-2204
    steps:
      - uses: actions/checkout@v3
      # - uses: valeriangalliat/action-sshd-cloudflared@v2
      - name: Setup emulator
        run: |
          ls -l $ANDROID_HOME/cmdline-tools
          export PATH=$PATH:$ANDROID_HOME/platform-tools:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/emulator
          # temporarily disable checking for EPIPE error and use yes to accept all licenses
          set +o pipefail
          yes | sdkmanager "system-images;android-30;default;x86_64"
          set -o pipefail

          #ls -l ~/.android/avd # not yet there
          avdmanager create avd --force --name Pixel_API_30_AOSP_x86_64 --package "system-images;android-30;default;x86_64" --device pixel
          ls -l ~/.android/avd

          INI_LOCATION=~/.android/avd/Pixel_API_30_AOSP_x86_64.ini
          cat $INI_LOCATION

          echo "hw.cpu.ncore=1" >> $INI_LOCATION
          echo "hw.ramSize=4096" >> $INI_LOCATION
          echo "hw.sdCard=yes" >> $INI_LOCATION
          echo "sdcard.size=1000M" >> $INI_LOCATION

          cat $INI_LOCATION

          emulator -avd Pixel_API_30_AOSP_x86_64 -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim &
          echo "Waiting for device to be ready..."
          # Source: https://android.stackexchange.com/a/83747
          adb wait-for-device
          A=$(adb shell getprop sys.boot_completed | tr -d '\r')
          while [ "$A" != "1" ]; do
                  sleep 2
                  A=$(adb shell getprop sys.boot_completed | tr -d '\r')
          done
          # Install test butler
          # Download test butler
          curl -f -o ~/test-butler-2.2.1.apk https://repo1.maven.org/maven2/com/linkedin/testbutler/test-butler-app/2.2.1/test-butler-app-2.2.1.apk
          adb install -r ~/test-butler-2.2.1.apk
          echo "Installation compelete! Launching the TestButler background service..."
          # Launch the test butler background service!
          adb shell am startservice com.linkedin.android.testbutler/com.linkedin.android.testbutler.ButlerService
          # Check that service is launched
          until [ `adb shell ps | grep butler | wc -l` -gt 0 ]
          do
            sleep 3
          done

          echo "Background service running! Saving snapshot..."
          adb emu avd snapshot save ci_boot

          echo "Snapshot saved! Killing emulator..."
          killall qemu-system-x86_64-headless

          # Wait until the emulator is off
          until [ `adb devices | grep emulator | wc -l` -gt 0 ]
          do
            sleep 3
          done

        shell: bash
      - uses: ./.github/actions/yarn-install
      - uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/yarn.lock', 'android/**/*.gradle*') }}
          restore-keys: ${{ runner.os }}-gradle-
      # Since the e2e runners have access to the Valora branding,
      # This check ensures there are no type errors there.
      # The `yarn build` step done in the test workflow also includes it but does it with the default celo branding.
      # - name: Step emulator
      #   uses: reactivecircus/android-emulator-runner@v2
      #   with:
      #     api-level: ${{ inputs.android-api-level }}
      #     profile: pixel
      #     avd-name: Pixel_API_${{ inputs.android-api-level }}_AOSP_x86_64
      #     # force-avd-creation: false
      #     # emulator-options: -no-window -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim -camera-back none -camera-front none -partition-size 2047
      #     arch: x86_64
      #     script: cd android; ./gradlew connectedCheck
      - name: TS check
        run: yarn build:ts
      - name: Check E2E wallet balance
        run: NODE_OPTIONS='--unhandled-rejections=strict' yarn ts-node ./e2e/scripts/check-e2e-wallet-balance.ts
      - name: Create Android E2E .env File
        working-directory: e2e
        run: echo WALLET_CONNECT_PROJECT_ID_E2E=${{ secrets.WALLET_CONNECT_PROJECT_ID_E2E }} >> .env
      - name: Create Detox Build
        run: |
          export CELO_TEST_CONFIG=e2e
          # export ANDROID_SDK_ROOT=$HOME/android-tools
          yarn detox build -c android.release
      # - name: AVD cache
      #   uses: actions/cache@v3
      #   id: avd-cache
      #   with:
      #     path: |
      #       ~/.android/avd/*
      #       ~/.android/adb*
      #     key: avd-${{ inputs.android-api-level }}
      # - name: Create AVD and generate snapshot for caching
      #   if: steps.avd-cache.outputs.cache-hit != 'true'
      #   uses: reactivecircus/android-emulator-runner@v2
      #   with:
      #     api-level: ${{ inputs.android-api-level }}
      #     profile: pixel
      #     arch: x86_64
      #     avd-name: Pixel_API_${{ inputs.android-api-level }}_AOSP_x86_64
      #     force-avd-creation: true
      #     emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
      #     disable-animations: true
      #     script: echo "Generated AVD snapshot for caching."
      # - name: Run Detox
      #   uses: reactivecircus/android-emulator-runner@v2
      #   with:
      #     api-level: ${{ inputs.android-api-level }}
      #     profile: pixel
      #     arch: x86_64
      #     avd-name: Pixel_API_${{ inputs.android-api-level }}_AOSP_x86_64
      #     force-avd-creation: false
      #     emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
      #     disable-animations: true
      #     script: >
      #       yarn detox test
      #       --device-name Pixel_API_${{ inputs.android-api-level }}_AOSP_x86_64
      #       --configuration android.release
      #       --artifacts-location e2e/artifacts
      #       --take-screenshots=failing
      #       --record-videos=failing
      #       --record-logs=failing
      #       --loglevel info
      #       --debug-synchronization 10000
      #       --maxWorkers 3
      #       --headless
      #       --retries 3
      #       # --device-boot-args="-snapshot ci_boot"
      #   timeout-minutes: 45
      - name: Run Detox
        run: >
          export PATH=$ANDROID_HOME/platform-tools:$PATH &&
          yarn detox test
          --device-name Pixel_API_${{ inputs.android-api-level }}_AOSP_x86_64
          --configuration android.release
          --artifacts-location e2e/artifacts
          --take-screenshots=failing
          --record-videos=failing
          --record-logs=failing
          --loglevel info
          --debug-synchronization 10000
          --maxWorkers 6
          --headless
          --retries 3
          --device-boot-args="-snapshot ci_boot"
        timeout-minutes: 45
      - name: Publish Android JUnit Report
        if: always()
        uses: mikepenz/action-junit-report@v3
        with:
          check_name: Android (${{ inputs.android-api-level }}) e2e Test Report
          report_paths: 'e2e/test-results/junit.xml'
      - name: 'Upload Android E2E Artifacts'
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: android-${{ inputs.android-api-level }}-e2e-artifact
          path: e2e/artifacts
      - name: 'Upload Android E2E HTML Report'
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: android-${{ inputs.android-api-level }}-e2e-test-report
          path: e2e/test-results
