# Reusable fastlane iOS workflow
name: Release - Fastlane iOS

on:
  workflow_call:
    inputs:
      branch:
        required: true
        type: string
      # Stringified JSON array with all iOS lanes to run
      lanes:
        required: true
        type: string
    secrets:
      # For Secret Manager + KMS decryption
      gcp-service-account-key:
        required: true

jobs:
  fastlane-ios:
    runs-on: macos-14
    strategy:
      fail-fast: false
      matrix:
        lane: ${{ fromJson(inputs.lanes) }}
    steps:
      - name: Set env
        run: echo "LANE_UPPERCASE=$(echo "${{ matrix.lane }}" | tr '[:lower:]' '[:upper:]')" >> $GITHUB_ENV
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v2
        with:
          project_id: celo-mobile-mainnet
          credentials_json: ${{ secrets.gcp-service-account-key }}
      - name: Google Secrets
        id: google-secrets
        uses: google-github-actions/get-secretmanager-secrets@v2
        with:
          secrets: |-
            DEV_P12_CERTIFICATE:projects/1027349420744/secrets/DEV_P12_CERTIFICATE
            DEV_P12_CERTIFICATE_PASSWORD:projects/1027349420744/secrets/DEV_P12_CERTIFICATE_PASSWORD
            SLACK_WEBHOOK_URL:projects/1027349420744/secrets/SLACK_WEBHOOK_URL
            APPLE_CONNECT_AUTHKEY:projects/1027349420744/secrets/APPLE_CONNECT_AUTHKEY
            APPLE_CONNECT_KEY_ID:projects/1027349420744/secrets/APPLE_CONNECT_KEY_ID
            APPLE_CONNECT_ISSUER_ID:projects/1027349420744/secrets/APPLE_CONNECT_ISSUER_ID
            BOT_SSH_KEY:projects/1027349420744/secrets/BOT_SSH_PRIVATE_KEY
            EMERGE_API_TOKEN:projects/1027349420744/secrets/EMERGE_API_TOKEN
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ steps.google-secrets.outputs.BOT_SSH_KEY }}
      - run: rm -rf .git/
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.2'
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
      - uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'
          check-latest: true
      - uses: google-github-actions/setup-gcloud@v2
      - uses: ./.github/actions/yarn-install
      - run: yarn ts-node .github/scripts/setWalletEnv.ts ${{ matrix.lane }}
      # Even though we use cloud signing, for now we still need a development certificate
      # See https://developer.apple.com/forums/thread/695759
      # The certificate was generated locally via the admin key and then uploaded to the secret manager
      - name: Install development P12 certificate
        uses: apple-actions/import-codesign-certs@v3
        with:
          keychain-password: 12345678910
          p12-file-base64: ${{ steps.google-secrets.outputs.DEV_P12_CERTIFICATE }}
          p12-password: ${{ steps.google-secrets.outputs.DEV_P12_CERTIFICATE_PASSWORD }}
      - name: Check development certificate hasn't expired
        # If the development certificate has expired, we need to generate a new one manually (once a year)
        # by building the app locally with the admin key and then exporting the development certificate and uploading it to the secret manager.
        #
        # Example command:
        # export APPLE_CONNECT_KEY_ID=...
        # export APPLE_CONNECT_ISSUER_ID=...
        # export APPLE_CONNECT_CERTIFICATE_PATH=/path/to/AuthKey.p8
        # bundle exec fastlane ios build environment:mainnet
        #
        # This may fail with the following error:
        # "Unable to close provisioning ledger entry because not all of its subentries are closed"
        # This is because the admin key can only generate 1 or 2 certificates.
        # To fix this, we need to revoke the certificates generated by the admin key from the Apple Developer Portal
        # https://developer.apple.com/account/resources/certificates/list
        # And then retry the build command. I also found that I needed to logout and back on my computer.
        #
        # After this you'll see an updated "Apple Development: Created via API (XXX)" certificate in the keychain
        #
        # Then manually export the updated certificate with its private key from the keychain (adding the right password for protection)
        # and upload it to the secret manager encoded in base64
        # base64 -i /path/to/AppleDevelopmentAuthKeyUser.p12 | pbcopy
        run: |
          security find-certificate -c "Apple Development: Created via API (${{ steps.google-secrets.outputs.APPLE_CONNECT_KEY_ID }})" -p | openssl x509 -noout -checkend 0
      - name: Pre build checks
        run: yarn ts-node .github/scripts/preBuildChecks.ts
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7 # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
      - name: Set build number
        run: agvtool new-version "$WALLET_COMMIT_UNIX_TIME"
        working-directory: ios
      - run: bundle exec pod install --repo-update
        working-directory: ios
      - name: Setup ramdisk with secrets
        run: |
          diskutil erasevolume HFS+ 'Temporary' $(hdiutil attach -nobrowse -nomount ram://2097152)
          cd /Volumes/Temporary

          echo '${{ steps.google-secrets.outputs.APPLE_CONNECT_AUTHKEY }}' > AuthKey.p8
      - env:
          APPLE_CONNECT_KEY_ID: ${{ steps.google-secrets.outputs.APPLE_CONNECT_KEY_ID }}
          APPLE_CONNECT_ISSUER_ID: ${{ steps.google-secrets.outputs.APPLE_CONNECT_ISSUER_ID }}
          APPLE_CONNECT_CERTIFICATE_PATH: /Volumes/Temporary/AuthKey.p8
          EMERGE_API_TOKEN: ${{ steps.google-secrets.outputs.EMERGE_API_TOKEN }}
        run: bundle exec fastlane ios ${{ matrix.lane }}
      - name: Build notification
        if: always()
        uses: edge/simple-slack-notify@v1.1.2
        with:
          status: ${{ job.status }}
          # Note: ${xxx} in this action are evaluated by JavaScript
          success_text: '✅ [${env.GITHUB_WORKFLOW} <${env.GITHUB_SERVER_URL}/${env.GITHUB_REPOSITORY}/actions/runs/${env.GITHUB_RUN_ID}|#${env.GITHUB_RUN_NUMBER}>] ${env.LANE} (iOS) build has been uploaded to TestFlight.'
          failure_text: '⚠️ [${env.GITHUB_WORKFLOW} <${env.GITHUB_SERVER_URL}/${env.GITHUB_REPOSITORY}/actions/runs/${env.GITHUB_RUN_ID}|#${env.GITHUB_RUN_NUMBER}>] ${env.LANE} (iOS) build failed. Please investigate.'
          cancelled_text: '⏏️ [${env.GITHUB_WORKFLOW} <${env.GITHUB_SERVER_URL}/${env.GITHUB_REPOSITORY}/actions/runs/${env.GITHUB_RUN_ID}|#${env.GITHUB_RUN_NUMBER}>] ${env.LANE} (iOS) build was cancelled.'
          fields: |
            [
              { "title": "Version", "value": "${env.WALLET_VERSION} (${env.WALLET_COMMIT_UNIX_TIME})", "short": true },
              { "title": "Commit", "value": "<https://github.com/valora-inc/wallet/commit/${env.WALLET_COMMIT_HASH}|${(env.WALLET_COMMIT_HASH || "").slice(0, 7)}> (<https://github.com/valora-inc/wallet/tree/${env.BRANCH}|${env.BRANCH}>)", "short": true }
            ]
        env:
          SLACK_WEBHOOK_URL: ${{ steps.google-secrets.outputs.SLACK_WEBHOOK_URL }}
          BRANCH: ${{ inputs.branch }}
          LANE: ${{ matrix.lane }}
      - name: Upload raw iOS logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ios-${{ matrix.lane }}-gym-logs
          path: ~/Library/Logs/gym
      # In case the build fails and the stdout output is not enough to debug the issue, we can show the last lines of the raw logs
      # Note: gym already tries that but only shows the last 5 lines
      # https://github.com/fastlane/fastlane/blob/0495da3504f8506587161c5ffb468f9694e65635/gym/lib/gym/error_handler.rb#L154
      - name: Show last lines of the raw iOS logs
        if: failure()
        run: tail -n 100 ~/Library/Logs/gym/*.log
