fastlane_version '2.94.0'

default_platform(:android)

def get_app_bundle_id(env)
  Dotenv.parse("../.env.#{env}")['APP_BUNDLE_ID']
end

def fastlane_supply(env, track)
  return supply(
    json_key: 'fastlane/google-play-service-account.json',
    track: track,
    track_promote_to: track,
    package_name: get_app_bundle_id(env),
    mapping: lane_context[SharedValues::GRADLE_MAPPING_TXT_OUTPUT_PATH],
    skip_upload_apk: true,
    skip_upload_metadata: true,
    skip_upload_changelogs: true,
    skip_upload_images: true,
    skip_upload_screenshots: true
  )
end

platform :android do

  # Android Lanes

  desc 'Clean the Android application'
  lane :clean do
    gradle(task: 'clean', project_dir: 'android/')
  end

  desc 'Build the Android application - requires environment param'
  lane :build do |options|
    clean
    environment = options[:environment].capitalize
    if options[:buildApk]
      ENV["GRADLE_OPTS"] = '-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-Xmx10000m -XX:+HeapDumpOnOutOfMemoryError"'
      gradle(task: 'assemble', build_type: 'Release', flavor: environment, project_dir: 'android/')
    else
      ENV["GRADLE_OPTS"] = '-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-Xmx10000m -XX:+HeapDumpOnOutOfMemoryError"'
      gradle(task: 'bundle', build_type: 'Release', flavor: environment, project_dir: 'android/')
    end
  end

  desc 'Ship Alfajores to Playstore Internal'
  lane :alfajores do
    env = 'alfajores'
    build(environment: env)
    fastlane_supply(env, 'internal')
  end

  desc 'Ship Mainnet to Playstore Internal'
  lane :mainnet do
    env = 'mainnet'
    build(environment: env)
    fastlane_supply(env, 'internal')
  end

  desc 'Build an Android apk'
  lane :build_apk do |options|
    env = options[:env]
    build(environment: env, buildApk: true)
  end

  desc 'Build an Android bundle'
  lane :build_bundle do |options|
    env = options[:env]
    build(environment: env)
  end
end

platform :ios do

  desc 'Build the iOS application - requires environment param'
  lane :build do |options|
    gym(
      workspace: 'ios/celo.xcworkspace',
      # Needs double quotes because Ruby differentiates
      # https://stackoverflow.com/questions/6395288/double-vs-single-quotes
      scheme: "celo-#{options[:environment]}",
      configuration: 'Release',
      # xcargs: '-allowProvisioningUpdates',
      output_directory: 'build',
      # verbose: true
     ) 
  end
  
  desc 'Prepare TestFlight'
  lane :prepare_testflight_and_upload do |options|
    api_key = app_store_connect_api_key(
      key_id: '3NK3HR2Q69',
      issuer_id: 'dcfc5c64-36b5-46a2-af36-84acc93d2b62',
      key_filepath: '/Users/runner/work/release-bundler/release-bundler/certificates/AuthKey_3NK3HR2Q69.p8',
      duration: 1200,
    )
    
    upload_to_testflight(
      api_key: api_key,
      skip_submission: true,
      skip_waiting_for_build_processing: true,
    )
  end

  desc 'Ship Alfajores to TestFlight'
  lane :alfajores do
    env = 'alfajores'
    build(environment: env)
    prepare_testflight_and_upload
  end

  desc 'Ship Mainnet to TestFlight'
  lane :mainnet do
    env = 'mainnet'
    build(environment: env)
    prepare_testflight_and_upload
  end

end


