source 'https://cdn.cocoapods.org/'

# Allow using RNFirebase as static frameworks
# https://rnfirebase.io/#allow-ios-static-frameworks
# Otherwise we get the following error:
# `The 'Pods-celo' target has transitive dependencies that include statically linked binaries [...]`
$RNFirebaseAsStaticFramework = true

# Workaround for the following error:
# `The 'Pods-celo' target has transitive dependencies that include statically linked binaries [...]`
$static_framework = [
  'react-native-flipper', 
  'FlipperKit', 
  'Flipper', 
  'Flipper-Folly',
  'Flipper-DoubleConversion',
  'Flipper-Glog', 
  'Flipper-PeerTalk', 
  'Flipper-RSocket',
  'Flipper-Fmt',
]

require_relative "../node_modules/react-native/scripts/react_native_pods"
require_relative "../node_modules/@react-native-community/cli-platform-ios/native_modules"

platform :ios, '12.4'
use_frameworks!

target "celo" do
  pod "CeloBlockchain", :path => "../node_modules/@celo/client/CeloBlockchain.podspec", :modular_headers => true
  # RNPermissions
  permissions_path = '../node_modules/react-native-permissions/ios'
  pod 'Permission-Camera', :path => "#{permissions_path}/Camera"
  pod 'Permission-AppTrackingTransparency', :path => "#{permissions_path}/AppTrackingTransparency"


  pod 'Plaid', '~> 2.3.2'

  target "celoTests" do
    inherit! :search_paths
  end

  config = use_native_modules!
  use_react_native!(:path => config[:reactNativePath])

  # Enables Flipper.
  #
  # Note that if you have use_frameworks! enabled, Flipper will not work and
  # you should disable these next few lines.
  use_flipper!()
end

target 'NotificationService' do
  pod 'CTNotificationService'
end

# Convert all permission pods into static libraries
# See https://github.com/react-native-community/react-native-permissions#workaround-for-use_frameworks-issues
pre_install do |installer|
  installer.pod_targets.each do |pod|
    if $static_framework.include?(pod.name) || pod.name.eql?('RNPermissions') || pod.name.start_with?('Permission-')
      def pod.build_type;
        Pod::BuildType.static_library
      end
    end
  end
end

post_install do |installer|
  react_native_post_install(installer)
  __apply_Xcode_12_5_M1_post_install_workaround(installer)

  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      config.build_settings["ENABLE_BITCODE"] = "NO"
      if config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] == '8.0'
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '9.0'
      end
    end
  end

  projects = installer.aggregate_targets
    .map{ |t| t.user_project }
    .uniq{ |p| p.path }
    .push(installer.pods_project)

  # This block is needed for preserving the EXCLUDED_ARCHS setting on M1 machines
  projects.each do |project|
    project.build_configurations.each do |config|
      # Needed for now as Xcode 12 now tries to build/link both arm64 and x86_64 slices for the simulator
      # but some of our prebuilt deps don't support this
      # See:
      # - https://stackoverflow.com/a/63955114/158525
      # - https://github.com/facebook/react-native/issues/29984
      # - https://apontious.com/2020/08/23/arm-wrestling-your-ios-simulator-builds/
      config.build_settings["EXCLUDED_ARCHS[sdk=iphonesimulator*]"] = "arm64 "
    end
    project.save()
  end

  # Include env xccconfig generated by React Native Config
  installer.aggregate_targets.each do |target|
    target.user_build_configurations.each_key do |key|
      cocoapods_xcconfig = target.xcconfig_path(key)
      rnconfig_xcconfig = target.client_root + "env.xcconfig"
      File.open(cocoapods_xcconfig, 'a') do |f|
        f.write <<~EOF
          // Env config generated by React Native Config
          #include? "#{rnconfig_xcconfig.relative_path_from(cocoapods_xcconfig.dirname)}"
        EOF
      end
    end
  end
end
