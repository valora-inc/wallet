// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Profile renders correctly 1`] = `
<RNCSafeAreaView
  edges={
    {
      "bottom": "additive",
      "left": "off",
      "right": "off",
      "top": "off",
    }
  }
  style={
    {
      "flex": 1,
    }
  }
>
  <RCTScrollView
    keyboardShouldPersistTaps="handled"
    testID="ProfileScrollView"
  >
    <View>
      <View
        style={
          {
            "alignItems": "center",
            "flexDirection": "column",
            "paddingBottom": 37,
            "paddingLeft": 10,
            "paddingRight": 15,
            "paddingTop": 24,
          }
        }
      >
        <View
          accessibilityState={
            {
              "busy": undefined,
              "checked": undefined,
              "disabled": undefined,
              "expanded": undefined,
              "selected": undefined,
            }
          }
          accessibilityValue={
            {
              "max": undefined,
              "min": undefined,
              "now": undefined,
              "text": undefined,
            }
          }
          accessible={true}
          focusable={true}
          nativeBackgroundAndroid={
            {
              "attribute": "selectableItemBackground",
              "rippleRadius": undefined,
              "type": "ThemeAttrAndroid",
            }
          }
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            [
              {
                "alignItems": "center",
                "alignSelf": "center",
                "borderRadius": 32,
                "height": 64,
                "justifyContent": "center",
                "width": 64,
              },
            ]
          }
          testID="PictureInput"
        >
          <View
            style={
              [
                {
                  "alignItems": "center",
                  "flexDirection": "row",
                  "justifyContent": "center",
                },
                undefined,
              ]
            }
          >
            <View
              style={
                [
                  {
                    "alignItems": "center",
                    "justifyContent": "center",
                  },
                  {
                    "backgroundColor": "hsl(0, 53%, 93%)",
                    "borderRadius": 32,
                    "height": 64,
                    "width": 64,
                  },
                ]
              }
            >
              <Text
                allowFontScaling={false}
                style={
                  [
                    {
                      "color": "#FFFFFF",
                      "fontFamily": "Inter-Medium",
                      "fontSize": 16,
                    },
                    {
                      "color": "hsl(0, 67%, 24%)",
                      "fontSize": 32,
                    },
                  ]
                }
              >
                J
              </Text>
            </View>
          </View>
          <View
            style={
              {
                "alignItems": "center",
                "backgroundColor": "#F8F9F9",
                "borderRadius": 20,
                "bottom": -13,
                "height": 40,
                "justifyContent": "center",
                "left": 37,
                "position": "absolute",
                "width": 40,
              }
            }
          >
            <svg
              fill="none"
              height={13}
              style={{}}
              viewBox="0 0 13 13"
              width={13}
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                clip-rule="evenodd"
                d="M10.8667 4.94998L8.03333 2.14998L8.96667 1.21665C9.22222 0.961091 9.53622 0.833313 9.90867 0.833313C10.2807 0.833313 10.5944 0.961091 10.85 1.21665L11.7833 2.14998C12.0389 2.40554 12.1722 2.71398 12.1833 3.07531C12.1944 3.4362 12.0722 3.74442 11.8167 3.99998L10.8667 4.94998ZM9.9 5.93331L2.83333 13H0V10.1666L7.06667 3.09998L9.9 5.93331Z"
                fill="#178154"
                fill-rule="evenodd"
                style={{}}
              />
            </svg>
          </View>
        </View>
        <Modal
          animationType="none"
          deviceHeight={1334}
          deviceWidth={null}
          hardwareAccelerated={false}
          hideModalContentWhileAnimating={false}
          onBackdropPress={[Function]}
          onModalHide={[Function]}
          onModalWillHide={[Function]}
          onModalWillShow={[Function]}
          onRequestClose={[Function]}
          panResponderThreshold={4}
          scrollHorizontal={false}
          scrollOffset={0}
          scrollOffsetMax={0}
          scrollTo={null}
          statusBarTranslucent={true}
          supportedOrientations={
            [
              "portrait",
              "landscape",
            ]
          }
          swipeThreshold={100}
          transparent={true}
          visible={false}
        />
      </View>
      <View
        style={
          {
            "borderBottomColor": "#E6E6E6",
            "borderBottomWidth": 1,
            "marginHorizontal": 24,
          }
        }
      >
        <View
          style={
            [
              {
                "alignItems": "center",
                "flex": 1,
                "flexDirection": "row",
                "justifyContent": "center",
              },
              undefined,
            ]
          }
        >
          <TextInput
            onBlur={[Function]}
            onChangeText={[Function]}
            onFocus={[Function]}
            placeholder="profileScreen.namePlaceholder, {}"
            style={
              [
                {
                  "color": "#2E3338",
                  "fontFamily": "Inter-Regular",
                  "fontSize": 16,
                  "lineHeight": 22,
                },
                {
                  "flex": 1,
                  "lineHeight": 22,
                  "paddingHorizontal": 0,
                  "paddingVertical": 12,
                },
                undefined,
              ]
            }
            testID="ProfileEditName"
            value="John Doe"
          />
        </View>
      </View>
      <View
        style={
          {
            "alignItems": "center",
          }
        }
      >
        <View
          style={
            [
              {
                "flexDirection": "row",
              },
              {
                "marginVertical": 24,
              },
            ]
          }
        >
          <View
            style={
              [
                {
                  "overflow": "hidden",
                },
                {
                  "borderRadius": 100,
                },
              ]
            }
          >
            <View
              accessibilityState={
                {
                  "busy": undefined,
                  "checked": undefined,
                  "disabled": undefined,
                  "expanded": undefined,
                  "selected": undefined,
                }
              }
              accessibilityValue={
                {
                  "max": undefined,
                  "min": undefined,
                  "now": undefined,
                  "text": undefined,
                }
              }
              accessible={true}
              focusable={true}
              nativeBackgroundAndroid={
                {
                  "attribute": "selectableItemBackground",
                  "rippleRadius": undefined,
                  "type": "ThemeAttrAndroid",
                }
              }
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                [
                  {
                    "alignItems": "center",
                    "backgroundColor": "#1AB775",
                    "flexDirection": "row",
                    "height": 48,
                    "justifyContent": "center",
                    "minWidth": 120,
                    "opacity": undefined,
                    "paddingHorizontal": 24,
                    "paddingVertical": 5,
                  },
                  undefined,
                ]
              }
              testID="GenerateNameButton"
            >
              <Text
                maxFontSizeMultiplier={1}
                style={
                  {
                    "color": "#FFFFFF",
                    "fontFamily": "Inter-SemiBold",
                    "fontSize": 16,
                    "lineHeight": 22,
                    "marginLeft": 0,
                    "marginRight": 0,
                  }
                }
              >
                profileScreen.generateName
              </Text>
            </View>
          </View>
        </View>
        <View
          accessibilityState={
            {
              "busy": undefined,
              "checked": undefined,
              "disabled": undefined,
              "expanded": undefined,
              "selected": undefined,
            }
          }
          accessibilityValue={
            {
              "max": undefined,
              "min": undefined,
              "now": undefined,
              "text": undefined,
            }
          }
          accessible={true}
          focusable={true}
          nativeBackgroundAndroid={
            {
              "attribute": "selectableItemBackground",
              "rippleRadius": undefined,
              "type": "ThemeAttrAndroid",
            }
          }
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          testID="SaveButton"
        >
          <Text
            style={
              {
                "color": "#1AB775",
                "fontFamily": "Inter-Regular",
                "fontSize": 16,
                "lineHeight": 22,
              }
            }
          >
            save
          </Text>
        </View>
      </View>
    </View>
  </RCTScrollView>
  <View
    collapsable={false}
    style={
      [
        {
          "bottom": 0,
          "left": 0,
          "right": 0,
        },
        {
          "height": 0,
        },
        undefined,
      ]
    }
  />
</RNCSafeAreaView>
`;
