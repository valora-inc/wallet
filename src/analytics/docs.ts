import { AnalyticsEventType } from 'src/analytics/Properties'

import {
  AppEvents,
  AssetsEvents,
  AuthenticationEvents,
  BuilderHooksEvents,
  CICOEvents,
  CeloExchangeEvents,
  CeloNewsEvents,
  CoinbasePayEvents,
  ContractKitEvents,
  DappExplorerEvents,
  DappShortcutsEvents,
  EarnEvents,
  FeeEvents,
  FiatExchangeEvents,
  HomeEvents,
  IdentityEvents,
  InviteEvents,
  JumpstartEvents,
  KeylessBackupEvents,
  NavigationEvents,
  NftEvents,
  OnboardingEvents,
  PerformanceEvents,
  PhoneVerificationEvents,
  PointsEvents,
  QrScreenEvents,
  SendEvents,
  SettingsEvents,
  SwapEvents,
  TokenBottomSheetEvents,
  TransactionDetailsEvents,
  TransactionEvents,
  WalletConnectEvents,
  WebViewEvents,
} from 'src/analytics/Events'

/**
 * Documentation for analytics events.
 *
 * Intentionally causes compilation errors if any analytics events are omitted (to remind us to document them).
 *
 * DO NOT add empty strings as descriptions! Some events have empty descriptions from before we used this to enforce
 *  documenting new events.
 */
export const eventDocs: Record<AnalyticsEventType, string> = {
  [AppEvents.app_launched]: ``,
  [AppEvents.app_state_error]: ``,
  [AppEvents.error_displayed]: ``,
  [AppEvents.error_fallback]: ``,
  [AppEvents.user_restart]: ``,
  [AppEvents.fetch_balance]: `when balances are fetched. occurs every 10 seconds on the transaction feed, or on-demand after events like completing a send`,
  [AppEvents.fetch_balance_error]: ``,
  [AppEvents.redux_keychain_mismatch]: `when the redux state doesn't contain the account found in the keychain`,
  [AppEvents.redux_store_recovery_success]: ``,
  [AppEvents.redux_no_matching_keychain_account]: `when account in redux has no matching password hash in the keychain`,
  [AppEvents.push_notification_opened]: ``,
  [AppEvents.push_notifications_permission_changed]: ``,
  [AppEvents.android_mobile_services_checked]: ``,
  [AppEvents.request_tracking_permission_started]: ``,
  [AppEvents.request_tracking_permission_declined]: ``,
  [AppEvents.request_tracking_permission_accepted]: ``,
  [AppEvents.account_funded]: `Fired when user balance (total fiat value of all supported tokens) is above $0.01 USD and the last known balance value was less than this`,
  [AppEvents.account_liquidated]: `Fired when user balance (total fiat value of all supported tokens) falls below $0.01 USD and the last known value was greater than this`,
  [AppEvents.in_app_review_impression]: `User sees an in-app review request`,
  [AppEvents.in_app_review_error]: `Error while attempting to display in-app review`,
  [AppEvents.multichain_beta_opt_in]: `When the user taps the Try it Now button on the multichain beta screen`,
  [AppEvents.multichain_beta_opt_out]: `When the user taps the No Thanks button on the multichain beta screen`,
  [AppEvents.multichain_beta_contact_support]: `When the user taps the Contact Support button on the multichain beta screen`,
  [AppEvents.handle_deeplink]: `When a deeplink that leads into the app is detected and handled`,
  [HomeEvents.account_circle_tapped]: `When the account circle used in the tab navigation is tapped`,
  [HomeEvents.profile_address_copy]: `When a user copies their wallet address from the profile screen`,
  [HomeEvents.notification_scroll]: ``,
  [HomeEvents.notification_impression]: `When the notification appears on the user screen for the first time. Note that the format of the notificationId property for user generated notifications is $NotificationType/$Id, where the $Id can be filtered out with a fuzzy string match.`,
  [HomeEvents.notification_select]: `When user taps on notification CTA(s). Note that the format of the notificationId property for user generated notifications is $NotificationType/$Id, where the $Id can be filtered out with a fuzzy string match.`,
  [HomeEvents.notification_center_opened]: `when the notification center is opened`,
  [HomeEvents.notification_center_spotlight_dismiss]: `when the user taps "got it" on the app update notification center spotlight`,
  [HomeEvents.transaction_feed_item_select]: ``,
  [HomeEvents.transaction_feed_address_copy]: ``,
  [HomeEvents.view_token_balances]: ``,
  [HomeEvents.home_action_pressed]: ``,
  [HomeEvents.notification_bell_pressed]: ``,
  [HomeEvents.hide_balances]: `When the eye icon is clicked to hide balances on the home screen`,
  [HomeEvents.show_balances]: `When the crossed out eye icon is clicked to show balances on the home screen`,
  [HomeEvents.nft_celebration_displayed]: `When user has seen an NFT celebration bottom sheet`,
  [HomeEvents.nft_celebration_animation_displayed]: `When user has seen an NFT celebration confetti animation`,
  [HomeEvents.nft_reward_accept]: `When user press "Use reward" button when presented with an NFT reward`,
  [HomeEvents.nft_reward_dismiss]: `When user dismiss the bottom sheet when presented with an NFT reward`,
  [SettingsEvents.settings_profile_edit]: ``,
  [SettingsEvents.profile_generate_name]: ``,
  [SettingsEvents.profile_save]: ``,
  [SettingsEvents.profile_cancel]: ``,
  [SettingsEvents.profile_photo_chosen]: ``,
  [SettingsEvents.profile_photo_removed]: ``,
  [SettingsEvents.settings_verify_number]: ``,
  [SettingsEvents.language_select]: ``,
  [SettingsEvents.pin_require_on_load]: ``,
  [SettingsEvents.licenses_view]: ``,
  [SettingsEvents.tos_view]: ``,
  [SettingsEvents.start_account_removal]: ``,
  [SettingsEvents.completed_account_removal]: ``,
  [SettingsEvents.change_pin_start]: ``,
  [SettingsEvents.change_pin_current_pin_entered]: ``,
  [SettingsEvents.change_pin_current_pin_error]: ``,
  [SettingsEvents.change_pin_new_pin_entered]: ``,
  [SettingsEvents.change_pin_new_pin_confirmed]: ``,
  [SettingsEvents.change_pin_new_pin_error]: ``,
  [SettingsEvents.settings_biometry_opt_in_enable]: ``,
  [SettingsEvents.settings_biometry_opt_in_complete]: ``,
  [SettingsEvents.settings_biometry_opt_in_error]: ``,
  [SettingsEvents.settings_biometry_opt_in_disable]: ``,
  // intentionally not tracking analytics opt in/out
  // to avoid tracking through omission
  [SettingsEvents.settings_recovery_phrase]: ``,
  [SettingsEvents.settings_haptic_feedback]: ``,
  [SettingsEvents.settings_analytics]: ``,
  [SettingsEvents.settings_revoke_phone_number]: ``,
  [SettingsEvents.settings_revoke_phone_number_confirm]: ``,
  [SettingsEvents.settings_delete_account]: `When the user taps on the Delete Account button in the settings screen`,
  [SettingsEvents.settings_delete_account_confirm]: `When the user confirms they want to delete their account`,
  [SettingsEvents.settings_set_up_keyless_backup]: ``,
  [SettingsEvents.settings_delete_keyless_backup]: ``,
  [KeylessBackupEvents.wallet_security_primer_get_started]: ``,
  [KeylessBackupEvents.cab_setup_recovery_phrase]: `When the recovery phrase link is pressed in the setup wallet backup screen`,
  [KeylessBackupEvents.cab_sign_in_another_way]: `When the sign in another way button is pressed in the setup wallet backup screen`,
  [KeylessBackupEvents.cab_sign_in_start]: `When the user presses 'Sign in with Apple' or 'Sign in with Google'`,
  [KeylessBackupEvents.cab_sign_in_success]: `When the user has successfully signed in with google or apple`,
  [KeylessBackupEvents.cab_sign_in_with_email_screen_back]: `When the back button is pressed on the sign in with email screen`,
  [KeylessBackupEvents.cab_sign_in_with_email_screen_cancel]: ``,
  [KeylessBackupEvents.cab_sign_in_with_email_screen_skip]: `When the skip button is pressed on the sign in with email bottom sheet`,
  [KeylessBackupEvents.cab_get_torus_keyshare_failed]: ``,
  [KeylessBackupEvents.cab_enter_phone_number_back]: `When the back button is pressed on the phone input screen`,
  [KeylessBackupEvents.cab_enter_phone_number_cancel]: `When the cancel button is pressed on the phone input screen`,
  [KeylessBackupEvents.cab_enter_phone_number_continue]: ``,
  [KeylessBackupEvents.cab_intro_continue]: `When the continue button is pressed on the keyless backup intro screen`,
  [KeylessBackupEvents.cab_issue_sms_code_start]: ``,
  [KeylessBackupEvents.cab_issue_sms_code_success]: ``,
  [KeylessBackupEvents.cab_issue_sms_code_error]: ``,
  [KeylessBackupEvents.cab_enter_phone_code_back]: `When the back button is pressed on the phone verification code input screen`,
  [KeylessBackupEvents.cab_enter_phone_code_cancel]: `When the cancel button is pressed on the phone verification code input screen`,
  [KeylessBackupEvents.cab_issue_app_keyshare_start]: ``,
  [KeylessBackupEvents.cab_issue_app_keyshare_success]: ``,
  [KeylessBackupEvents.cab_issue_app_keyshare_error]: ``,
  [KeylessBackupEvents.cab_progress_completed_continue]: ``,
  [KeylessBackupEvents.cab_progress_failed_later]: ``,
  [KeylessBackupEvents.cab_progress_failed_manual]: ``,
  [KeylessBackupEvents.cab_progress_failed_skip_onboarding]: ``,
  [KeylessBackupEvents.cab_post_encrypted_mnemonic_failed]: ``,
  [KeylessBackupEvents.cab_torus_keyshare_timeout]: ``,
  [KeylessBackupEvents.cab_handle_keyless_backup_failed]: `When keyless backup fails to generate store encrypted mnemonic for setup or fails to retrieve and decrypt mnemonic for restore`,
  [KeylessBackupEvents.cab_handle_keyless_backup_success]: `When keyless backup successfully saves encrypted mnemonic for setup or successfully retrieves and decrypts mnemonic for restore`,
  [KeylessBackupEvents.cab_restore_zero_balance_accept]: `When a user is restoring from CAB and a dialog is shown informing them that their wallet has zero balance but they proceed anyways`,
  [KeylessBackupEvents.cab_restore_zero_balance_bail]: `When a user is restoring from CAB and a dialog is shown informing them that their wallet has zero balance and they choose to bail and restart restore flow`,
  [KeylessBackupEvents.cab_restore_completed_continue]: `When a user has completed restoring through CAB and on the success screen they press continue`,
  [KeylessBackupEvents.cab_restore_failed_try_again]: `When a user is restoring from CAB and the restore fails, and they opt to try again`,
  [KeylessBackupEvents.cab_restore_failed_create_new_wallet]: `When a user is restoring from CAB and the restore fails, and they opt to create a new wallet`,
  [KeylessBackupEvents.cab_restore_failed_help]: `When a user is restoring from CAB and the restore fails, and they press the Help button`,
  [KeylessBackupEvents.cab_phone_verification_help]: `When a user is asked to enter the phone code in CAB and they tap the Help button`,
  [KeylessBackupEvents.cab_phone_verification_help_skip]: `When a user is on the Help bottom sheet on CAB phone verification screen, and they hit skip`,
  [KeylessBackupEvents.cab_phone_verification_help_go_back]: `When a user is on the Help bottom sheet on CAB phone verification screen, and they hit go back`,
  [KeylessBackupEvents.cab_phone_verification_help_use_phrase]: `When a user is on the Help bottom sheet on CAB phone verification screen during setup in onboarding, and they hit use recovery phrase`,
  [KeylessBackupEvents.cab_restore_mnemonic_not_found]: `When a user is restoring from CAB and the mnemonic is not found. Meaning one or more of the user's keyshares/auth methods were incorrect`,
  [KeylessBackupEvents.cab_setup_hashed_keyshares]: `When a user is setting up CAB, the hashed keyshares from their phone and email are saved`,
  [OnboardingEvents.create_account_start]: ``,
  [OnboardingEvents.restore_account_start]: ``,
  [OnboardingEvents.restore_account_cancel]: ``,
  [OnboardingEvents.backup_education_start]: ``,
  [OnboardingEvents.backup_education_scroll]: ``,
  [OnboardingEvents.backup_education_complete]: ``,
  [OnboardingEvents.backup_education_cancel]: ``,
  [OnboardingEvents.backup_start]: ``,
  [OnboardingEvents.backup_continue]: `(count # of taps on “Continue” button in Backup_Phrase)`,
  [OnboardingEvents.backup_complete]: `(count # of taps on "Cancel" button in Backup_Phrase/BackupQuiz)`,
  [OnboardingEvents.backup_more_info]: ``,
  [OnboardingEvents.backup_delay_confirm]: `when a user confirms they want to delay backup`,
  [OnboardingEvents.backup_delay_cancel]: `when a user decides to return to backup flow`,
  [OnboardingEvents.backup_cancel]: `(count # of taps on "Cancel" button in Backup_Phrase/BackupQuiz)`,
  [OnboardingEvents.backup_error]: ``,
  [OnboardingEvents.backup_quiz_start]: ``,
  [OnboardingEvents.backup_quiz_progress]: `whenever the backspace is pressed or word is chosen`,
  [OnboardingEvents.backup_quiz_complete]: `(Count # of successful Recovery Phrase confirmations Backup_Quiz)`,
  [OnboardingEvents.backup_quiz_incorrect]: `(Count # of failed Recovery Phrase confirmations Backup_Quiz)`,
  [OnboardingEvents.terms_and_conditions_accepted]: `when the accept button on the terms and conditions screen is pressed or when the checkbox is checked and the create / import button is pressed on the welcome screen`,
  [OnboardingEvents.celo_education_start]: ``,
  [OnboardingEvents.celo_education_scroll]: ``,
  [OnboardingEvents.celo_education_complete]: ``,
  [OnboardingEvents.celo_education_cancel]: ``,
  [OnboardingEvents.name_and_picture_set]: ``,
  [OnboardingEvents.name_and_picture_skip]: ``,
  [OnboardingEvents.pin_set]: ``,
  [OnboardingEvents.pin_invalid]: ``,
  [OnboardingEvents.pin_never_set]: ``,
  [OnboardingEvents.biometry_opt_in_start]: ``,
  [OnboardingEvents.biometry_opt_in_cancel]: ``,
  [OnboardingEvents.biometry_opt_in_approve]: ``,
  [OnboardingEvents.biometry_opt_in_complete]: ``,
  [OnboardingEvents.biometry_opt_in_error]: ``,
  [OnboardingEvents.wallet_import_start]: ``,
  [OnboardingEvents.wallet_import_phrase_updated]: ``,
  [OnboardingEvents.wallet_import_submit]: ``,
  [OnboardingEvents.wallet_import_cancel]: `when a user cancels import of empty wallet or navigates back`,
  [OnboardingEvents.wallet_import_zero_balance]: `when the user is informed a wallet has zero balance`,
  [OnboardingEvents.wallet_import_phrase_invalid]: ``,
  [OnboardingEvents.wallet_import_phrase_correction_attempt]: ``,
  [OnboardingEvents.wallet_import_phrase_correction_success]: ``,
  [OnboardingEvents.wallet_import_phrase_correction_failed]: ``,
  [OnboardingEvents.wallet_import_error]: ``,
  [OnboardingEvents.wallet_import_success]: ``,
  [OnboardingEvents.initialize_account_start]: ``,
  [OnboardingEvents.initialize_account_complete]: `When the wallet has been successfully initialized after onboarding (either by creating a new account or restoring an existing one)`,
  [OnboardingEvents.initialize_account_error]: ``,
  [OnboardingEvents.protect_wallet_use_recovery]: ``,
  [OnboardingEvents.protect_wallet_help]: ``,
  [OnboardingEvents.protect_wallet_help_dismiss]: ``,
  [OnboardingEvents.protect_wallet_copy_phrase]: ``,
  [OnboardingEvents.protect_wallet_complete]: ``,
  [OnboardingEvents.cya_button_press]: `when one of the choose your adventure card is pressed. Properties include card name, position of the card (1-based index) and card order`,
  [OnboardingEvents.cya_later]: `when "I'll explore later" is pressed`,
  [OnboardingEvents.link_phone_number]: `User chooses to link phone number for CPV after recovery flow`,
  [OnboardingEvents.link_phone_number_later]: `User chooses not to link phone number for CPV after recovery flow`,

  // Events emitted in the CPV flow
  [PhoneVerificationEvents.phone_verification_skip_confirm]: `when skip is confirmed from the dialog in the phone number input screen`,
  [PhoneVerificationEvents.phone_verification_learn_more]: `when the learn more dialog is launched in the phone number input screen`,
  [PhoneVerificationEvents.phone_verification_start]: `when the start button is pressed in the phone number input screen`,
  [PhoneVerificationEvents.phone_verification_code_request_success]: `when the verifyPhoneNumber endpoint returns successfully`,
  [PhoneVerificationEvents.phone_verification_restore_success]: `when the verifyPhoneNumber endpoint returns that the user is already verified (restore wallet flow)`,
  [PhoneVerificationEvents.phone_verification_code_verify_start]: `when the user has entered the sms code and we start to validate on the backend`,
  [PhoneVerificationEvents.phone_verification_code_verify_success]: `when the backend confirms that the sms code is successfully validated`,
  [PhoneVerificationEvents.phone_verification_code_verify_error]: `when the backend throws an error and the sms code cannot be validated`,
  [PhoneVerificationEvents.phone_verification_input_help]: `when the help button is pressed`,
  [PhoneVerificationEvents.phone_verification_input_help_continue]: `when the user presses continue on the help dialog to continue verification`,
  [PhoneVerificationEvents.phone_verification_resend_message]: `when the user triggers a resend of the sms code`,
  [PhoneVerificationEvents.phone_verification_revoke_start]: `when the revoke endpoint is called`,
  [PhoneVerificationEvents.phone_verification_revoke_success]: `when the revoke endpoint returns successfully`,
  [PhoneVerificationEvents.phone_verification_revoke_error]: `when the revoke endpoint returns an error`,
  [IdentityEvents.contacts_import_permission_denied]: ``,
  [IdentityEvents.contacts_import_start]: ``,
  [IdentityEvents.contacts_import_complete]: ``,
  [IdentityEvents.contacts_processing_complete]: ``,
  [IdentityEvents.contacts_import_error]: ``,
  [IdentityEvents.phone_number_lookup_start]: ``,
  [IdentityEvents.phone_number_lookup_complete]: ``,
  [IdentityEvents.phone_number_lookup_error]: ``,
  [IdentityEvents.address_lookup_start]: `When address verification lookup starts`,
  [IdentityEvents.address_lookup_complete]: `When address verification lookup is completed`,
  [IdentityEvents.address_lookup_error]: `When address verification lookup encounters an error`,
  [AuthenticationEvents.get_pincode_start]: ``,
  [AuthenticationEvents.get_pincode_complete]: ``,
  [AuthenticationEvents.get_pincode_error]: ``,
  [AuthenticationEvents.get_pincode_with_biometry_start]: ``,
  [AuthenticationEvents.get_pincode_with_biometry_complete]: ``,
  [AuthenticationEvents.get_pincode_with_biometry_error]: ``,
  [AuthenticationEvents.get_pincode_with_input_start]: ``,
  [AuthenticationEvents.get_pincode_with_input_complete]: ``,
  [AuthenticationEvents.get_pincode_with_input_error]: ``,
  [InviteEvents.invite_banner_impression]: ``,
  [InviteEvents.invite_with_share]: ``,
  [InviteEvents.invite_with_share_dismiss]: ``,
  [InviteEvents.invite_with_referral_url]: ``,
  [InviteEvents.opened_via_invite_url]: `When the app is opened via a referral link (even if the link took the user to the app store first). Note that this event is fired on app open, so the user will not have a wallet address yet.`,
  [InviteEvents.invite_help_link]: `When taps "View all terms" in invite disclaimer`,
  [SendEvents.send_scan]: `when scan QR icon is selected from the send screen`,
  [SendEvents.send_select_recipient]: `when recipient was selected`,
  [SendEvents.send_cancel]: `when user x's out of Send screen`,
  [SendEvents.send_amount_back]: `back button pressed on amount screen`,
  [SendEvents.send_amount_continue]: `when next button pressed on amount enter page`,
  [SendEvents.send_confirm_back]: `when back button pressed on send confirmation screen`,
  [SendEvents.send_confirm_send]: `when send button pressed on send confirmation screen`,
  [SendEvents.send_secure_start]: `when either secure send scan or manual confirm button pressed`,
  [SendEvents.send_secure_back]: `when back button is pressed during secure send`,
  [SendEvents.send_secure_cancel]: `when secure send flow is canceled`,
  [SendEvents.send_secure_info]: `when "help" button is pressed`,
  [SendEvents.send_secure_info_dismissed]: `when "help" button is dismissed`,
  [SendEvents.send_secure_submit]: `when an account is submitted for validation`,
  [SendEvents.send_secure_incorrect]: `when there's been an error validating the account`,
  [SendEvents.send_secure_complete]: `when an account has been validated`,
  [SendEvents.send_tx_start]: `issued from the sendPayment saga, after a user confirms their intent to send and right before we build and send the transaction to the network`,
  [SendEvents.send_tx_complete]: `when a send transaction has successfully completed`,
  [SendEvents.send_tx_error]: `when there is an error sending a transaction`,
  [SendEvents.token_dropdown_opened]: ``,
  [SendEvents.max_pressed]: ``,
  [SendEvents.swap_input_pressed]: ``,

  // related to the alert that is shown when sending to an unknown address
  [SendEvents.check_account_alert_shown]: ``,
  [SendEvents.check_account_do_not_ask_selected]: ``,
  [SendEvents.check_account_alert_back]: ``,
  [SendEvents.check_account_alerts_continue]: ``,

  // Events for the send select recipient screen
  [SendEvents.send_select_recipient_scan_qr]: `When the QR code button is pressed`,
  [SendEvents.send_select_recipient_contacts]: `When the import contacts button is pressed`,
  [SendEvents.send_phone_number_modal_connect]: `When the connect action is pressed on the modal shown when the user clicks sync contacts but hasn't connected a phone number yet`,
  [SendEvents.send_phone_number_modal_dismiss]: `When the dismiss action or background is pressed on the modal shown when the user clicks sync contacts but hasn't connected a phone number yet`,
  [SendEvents.send_contacts_modal_settings]: `When the settings action is pressed in the modal shown when the user clicks sync contacts but hasn't granted contacts permission yet`,
  [SendEvents.send_contacts_modal_dismiss]: `When the dismiss action or background is pressed in the modal shown when the user clicks sync contacts but hasn't granted contacts permission yet`,
  [SendEvents.request_contacts_permission_started]: `When contacts permission is requested (for iOS this and the below fires only when the permission is requestable, for Android these fire when the permission is requstable or in a do not ask again state)`,
  [SendEvents.request_contacts_permission_completed]: `When the request to contact permission completes, includes a property on the permission status`,
  [SendEvents.send_select_recipient_send_press]: `When the send button is pressed after selecting a recipient`,
  [SendEvents.send_select_recipient_invite_press]: `When the invite button is pressed after selecting a recipient`,
  [SendEvents.send_select_recipient_recent_press]: `When a recent recipient is pressed`,
  [JumpstartEvents.send_select_recipient_jumpstart]: `When the user taps the Jumpstart button on the select recipient screen to start sending crypto via escrow link`,
  [JumpstartEvents.jumpstart_send_amount_exceeds_threshold]: `When the user enters a send value greater than allowed threshold, and is shown the max send amount warning`,
  [JumpstartEvents.jumpstart_send_amount_continue]: `When the user taps the continue button on the jumpstart enter amount screen`,
  [JumpstartEvents.jumpstart_send_confirm]: `When the user taps the confirm button on the jumpstart confirmation screen to start sending the transaction`,
  [JumpstartEvents.jumpstart_send_start]: `When the wallet is about to send the transactions to the network`,
  [JumpstartEvents.jumpstart_send_cancelled]: `When the user cancels the transaction, e.g. by exiting the pincode enter screen`,
  [JumpstartEvents.jumpstart_send_succeeded]: `When the transactions are successfully settled on the network`,
  [JumpstartEvents.jumpstart_send_failed]: `When the transactions failed to send or are reverted by the network`,
  [JumpstartEvents.jumpstart_share_link]: `When the user taps on the share link button on the jumpstart share screen or qr bottom sheet`,
  [JumpstartEvents.jumpstart_share_link_result]: `The result of the user's share action, can be shared or dismissed or error`,
  [JumpstartEvents.jumpstart_show_QR]: `When the user taps the CTA to launch the QR code bottom sheet on the share screen`,
  [JumpstartEvents.jumpstart_copy_link]: `When the user copies the link from the share screen or QR code bottom sheet`,
  [JumpstartEvents.jumpstart_share_close]: `When the user tries to navigate away from the jumpstart share screen`,
  [JumpstartEvents.jumpstart_share_confirm_close]: `When the user confirms on the popup that they want to navigate away`,
  [JumpstartEvents.jumpstart_share_dismiss_close]: `When the user dismisses the popup and does not navigate away from the jumpstart share screen`,
  [JumpstartEvents.jumpstart_claim_succeeded]: `When claiming from Wallet Jumpstart succeeded`,
  [JumpstartEvents.jumpstart_claim_failed]: `When claiming from Wallet Jumpstart failed`,
  [JumpstartEvents.jumpstart_claimed_token]: `When user successfully claimed an ERC20 token trough Wallet Jumpstart`,
  [JumpstartEvents.jumpstart_claimed_nft]: `When user successfully claimed an NFT trough Wallet Jumpstart`,
  [JumpstartEvents.jumpstart_claim_loading_dismissed]: `When user dismisses Wallet Jumpstart claim loading toast`,
  [JumpstartEvents.jumpstart_claim_error_dismissed]: `When user dismisses Wallet Jumpstart claim error toast`,
  [JumpstartEvents.jumpstart_claim_error_contact_support]: `When user taps "Contact Support" CTA on Wallet Jumpstart claim error toast`,
  [JumpstartEvents.jumpstart_reclaim_press]:
    'When user taps on "Reclaim" button on the Jumpstart screen',
  [JumpstartEvents.jumpstart_reclaim_start]:
    'When user taps on "Confirm" button on the transaction confirmation bottom sheet to start sending the reclaim transaction to the network',
  [JumpstartEvents.jumpstart_reclaim_failed]:
    'When the reclaim transaction fails to send, or is reverted by the network',
  [JumpstartEvents.jumpstart_reclaim_succeeded]:
    'When the reclaim transaction was successful on the network',
  [JumpstartEvents.jumpstart_reclaim_contact_support]:
    'When the user taps "contact support" from any of the error toasts',
  [JumpstartEvents.jumpstart_claim_status_fetch_success]:
    'When fetching whether a jumpstart link has been claimed is successful',
  [JumpstartEvents.jumpstart_claim_status_fetch_error]:
    'When fetching whether a jumpstart link has been claimed fails',
  [JumpstartEvents.jumpstart_reclaim_dismiss_error]:
    'When user dismisses the error toast for when the reclaim transaction failed',
  [JumpstartEvents.jumpstart_add_assets_show_actions]:
    'When user taps the CTA to show ways to add assets',
  [JumpstartEvents.jumpstart_add_assets_action_press]:
    'When user selects an add assets action from the available options',
  [JumpstartEvents.jumpstart_intro_seen]: `when jumpstart intro is seen by the user`,
  // Events for the QR screen redesign
  [QrScreenEvents.qr_screen_copy_address]: ``,
  [QrScreenEvents.qr_scanner_open]: `When unique "QR scanner" button is pressed`,
  [QrScreenEvents.qr_scanned]: `When a QR code has been successfully scanned`,
  [FeeEvents.estimate_fee_failed]: ``,
  [FeeEvents.estimate_fee_success]: ``,
  [TransactionEvents.transaction_start]: `when a transaction is about to be submitted to the blockchain`,
  [TransactionEvents.transaction_gas_estimated]: `when gas is estimated for a transaction or an already estimated gas is used in a transaction about to be submitted (only for contract-kit)`,
  [TransactionEvents.transaction_hash_received]: `when a hash is received for a transaction`,
  [TransactionEvents.transaction_receipt_received]: `when a receipt is received for a transaction`,
  [TransactionEvents.transaction_confirmed]: `when a transaction is confirmed by the blockchain`,
  [TransactionEvents.transaction_error]: `when a transaction submission emits an error (only for contract-kit)`,
  [TransactionEvents.transaction_exception]: `when a transaction submission throws`,
  [TransactionEvents.transaction_prepare_insufficient_gas]: `when a transaction cannot be prepared due to insufficient gas. Includes networkId and origin props to identify the transaction being attempted. For swaps, the networkId is always the source network`,
  [CeloExchangeEvents.celo_withdraw_completed]: `when the transaction for the withdrawal is completed`,

  // The CICO landing page accessible from the Settings Menu
  [FiatExchangeEvents.cico_landing_token_balance]: `User taps to view detailed token balance`,
  [FiatExchangeEvents.cico_landing_select_flow]: `User taps which CICO flow they want (Cash in, cash out, spend)`,
  [FiatExchangeEvents.cico_landing_how_to_fund]: `User taps help article link at the bottom`,

  // The CICO Amount screen where the user selects the amount of money
  [FiatExchangeEvents.cico_amount_chosen]: `User selects a valid amount and taps next`,
  [FiatExchangeEvents.cico_amount_chosen_invalid]: `User attempts to click next but the amount is invalid`,
  [FiatExchangeEvents.cico_amount_back]: `User presses the back button from the amount screen`,

  // Select Provider Screen
  [FiatExchangeEvents.cico_providers_section_impression]: `User sees a category of providers`,
  [FiatExchangeEvents.cico_providers_section_expand]: `User expands a category of providers`,
  [FiatExchangeEvents.cico_providers_section_collapse]: `User collapses a category of providers`,
  [FiatExchangeEvents.cico_providers_quote_selected]: `User selects a quote`,
  [FiatExchangeEvents.cico_providers_exchanges_selected]: `User taps the External Exchanges section`,
  [FiatExchangeEvents.cico_providers_back]: `User presses the back button from the Select Providers screen`,
  [FiatExchangeEvents.cico_providers_unavailable_impression]: `User sees a blurb about providers unavailable`,
  [FiatExchangeEvents.cico_providers_unavailable_selected]: `User taps a blurb about providers unavailable`,
  [FiatExchangeEvents.cico_providers_new_info_opened]: `User taps on the new label and views the dialog`,
  [FiatExchangeEvents.cico_providers_fetch_quotes_result]: `Information on fetch quotes result`,

  // Cash In Success Screen
  [FiatExchangeEvents.cash_in_success]: `Screen users are (most of the time) redirected to after cash in with external providers`,

  // Add fund flow entered through home screen cash in bottom sheet
  [FiatExchangeEvents.cico_add_bottom_sheet_selected]: ``,
  [FiatExchangeEvents.cico_add_bottom_sheet_impression]: ``,
  [FiatExchangeEvents.cico_add_bottom_sheet_ramp_selected]: ``,
  [FiatExchangeEvents.cico_add_bottom_sheet_ramp_available]: ``,

  // Add fund flow entered through new user get started card
  [FiatExchangeEvents.cico_add_get_started_impression]: `When the get started card with the add funds button is displayed`,
  [FiatExchangeEvents.cico_add_get_started_selected]: `When the user taps 'add funds' on the get started card`,

  // Funding Education Dialog Screen
  [FiatExchangeEvents.external_exchange_link]: ``,
  [FiatExchangeEvents.cico_external_exchanges_back]: ``,
  [FiatExchangeEvents.cico_cash_out_copy_address]: ``,

  // External Exchanges QR Code Screen
  [FiatExchangeEvents.cico_exchange_qr_bottom_sheet_open]: ``,
  [FiatExchangeEvents.cico_exchange_qr_bottom_sheet_close]: ``,
  [FiatExchangeEvents.cico_exchange_qr_bottom_sheet_link_press]: ``,
  [FiatExchangeEvents.cico_exchange_qr_back]: ``,
  [FiatExchangeEvents.cico_exchange_qr_copy_address]: ``,
  [FiatExchangeEvents.cico_exchange_qr_share]: ``,

  // Spend Flow
  [FiatExchangeEvents.spend_merchant_link]: ``,
  [FiatExchangeEvents.cico_spend_select_provider_back]: ``,
  [FiatExchangeEvents.cico_non_celo_exchange_send_bar_continue]: `When send bar is tapped from cash out for cUSD & cEUR`,

  // Simplex Review Screen
  [FiatExchangeEvents.cico_simplex_open_webview]: ``,

  // Fiat connect review screen
  [FiatExchangeEvents.cico_fc_review_submit]: ``,
  [FiatExchangeEvents.cico_fc_review_cancel]: ``,
  [FiatExchangeEvents.cico_fc_review_back]: ``,
  [FiatExchangeEvents.cico_fc_review_error_contact_support]: ``,

  // Fiat Connect link account screen
  [FiatExchangeEvents.cico_fc_review_error_retry]: ``,
  [FiatExchangeEvents.cico_fc_link_account_continue]: ``,
  [FiatExchangeEvents.cico_fc_link_account_back]: ``,
  [FiatExchangeEvents.cico_fc_link_account_provider_website]: ``,

  // Fiat Connect link KYC & account page
  [FiatExchangeEvents.cico_fc_link_kyc_account_back]: ``,

  // Fiat Connect fiat details screen
  [FiatExchangeEvents.cico_fiat_details_success]: ``,
  [FiatExchangeEvents.cico_fiat_details_back]: ``,
  [FiatExchangeEvents.cico_fiat_details_cancel]: ``,
  [FiatExchangeEvents.cico_fiat_details_error]: ``,

  // Fiat Connect transfer analytics
  [FiatExchangeEvents.cico_fc_transfer_api_error]: ``,
  [FiatExchangeEvents.cico_fc_transfer_tx_error]: ``,
  [FiatExchangeEvents.cico_fc_transfer_error]: ``,
  [FiatExchangeEvents.cico_fc_transfer_success]: ``,

  // Fiat Connect transfer status screen
  [FiatExchangeEvents.cico_fc_transfer_error_retry]: ``,
  [FiatExchangeEvents.cico_fc_transfer_error_cancel]: ``,
  [FiatExchangeEvents.cico_fc_transfer_error_contact_support]: ``,
  [FiatExchangeEvents.cico_fc_transfer_success_complete]: ``,
  [FiatExchangeEvents.cico_fc_transfer_success_view_tx]: ``,
  [FiatExchangeEvents.cico_fc_transfer_processing_continue]: ``,
  [FiatExchangeEvents.cico_fc_transfer_processing_view_tx]: ``,

  // Fiat Connect KYC status screens
  [FiatExchangeEvents.cico_fc_kyc_status_contact_support]: ``,
  [FiatExchangeEvents.cico_fc_kyc_status_back]: ``,
  [FiatExchangeEvents.cico_fc_kyc_status_close]: ``,
  [FiatExchangeEvents.cico_fc_kyc_status_try_again]: ``,
  [FiatExchangeEvents.cico_fc_kyc_status_switch_method]: ``,
  [ContractKitEvents.init_contractkit_start]: ``,
  [ContractKitEvents.init_contractkit_get_wallet_start]: ``,
  [ContractKitEvents.init_contractkit_get_wallet_finish]: ``,
  [ContractKitEvents.init_contractkit_init_wallet_finish]: ``,
  [ContractKitEvents.init_contractkit_finish]: ``,
  [PerformanceEvents.redux_store_size]: ``,
  [NavigationEvents.navigator_not_ready]: ``,

  // Events related to Points program
  [PointsEvents.points_discover_press]: `when points card is pressed in the discover tab`,
  [PointsEvents.points_intro_dismiss]: `when points intro is dismissed`,
  [PointsEvents.points_intro_back]: `when back button is pressed from points intro screen`,
  [PointsEvents.points_screen_back]: `when back button is pressed from Points home screen`,
  [PointsEvents.points_screen_card_press]: `when an activity card is pressed from Points home screen`,
  [PointsEvents.points_screen_card_cta_press]: `when a CTA is pressed on an activity card bottom sheet from the Points home screen`,
  [PointsEvents.points_screen_activity_press]: `when the Activity button is pressed from Points home screen`,
  [PointsEvents.points_screen_activity_try_again_press]: `when the Try Again button is pressed after an error while fetching Points activity`,
  [PointsEvents.points_screen_activity_fetch_more]: `when the user requests to fetch more Points history`,
  [PointsEvents.points_screen_activity_learn_more_press]: `when the Learn button is pressed when a user has no points history`,
  [PointsEvents.points_screen_disclaimer_press]: `when the learn more button is pressed from Points activity screen`,

  // Events related to WalletConnect pairing (technical: opening up the communication channel via QR code or deeplink)
  [WalletConnectEvents.wc_pairing_start]: `when WC pairing is started (no UI at this point)`,
  [WalletConnectEvents.wc_pairing_success]: `when WC pairing succeeds`,
  [WalletConnectEvents.wc_pairing_error]: `when WC pairing fails`,

  // Events related to WalletConnect sessions (approving/rejecting/removing dapps)
  [WalletConnectEvents.wc_session_propose]: `when the WC session screen is displayed to approve/reject a new dapp`,
  [WalletConnectEvents.wc_session_approve_start]: `when user presses the button to approve the dapp connection`,
  [WalletConnectEvents.wc_session_approve_success]: `when the dapp approval succeeds`,
  [WalletConnectEvents.wc_session_approve_error]: `when the dapp approval fails`,
  [WalletConnectEvents.wc_session_reject_start]: `when user presses the button to reject the dapp connection`,
  [WalletConnectEvents.wc_session_reject_success]: `when the dapp rejection succeeds`,
  [WalletConnectEvents.wc_session_reject_error]: `when the dapp rejection fails`,
  [WalletConnectEvents.wc_session_remove_start]: `when user presses the button to disconnect the dapp`,
  [WalletConnectEvents.wc_session_remove_success]: `when the dapp disconnection succeeds`,
  [WalletConnectEvents.wc_session_remove_error]: `when the dapp disconnection fails`,

  // Events related to WalletConnect requests from approved dapps (signing)
  [WalletConnectEvents.wc_request_propose]: `when the WC request screen is displayed to accept/deny a dapp request`,
  [WalletConnectEvents.wc_request_accept_start]: `when user presses the button to accept a dapp request`,
  [WalletConnectEvents.wc_request_accept_success]: `when the dapp request succeeds`,
  [WalletConnectEvents.wc_request_accept_error]: `when the dapp request fails`,
  [WalletConnectEvents.wc_request_deny_start]: `when user presses the button to accept a dapp request`,
  [WalletConnectEvents.wc_request_deny_success]: `when the dapp request denial succeeds`,
  [WalletConnectEvents.wc_request_deny_error]: `when the dapp request denial fails`,
  [WalletConnectEvents.wc_copy_request_payload]: `when a user taps to copy the request payload from the bottom sheet`,
  [CICOEvents.persona_kyc_start]: `when a user begins the Persona KYC process (clicks 'Set up ID Verification' button)`,
  [CICOEvents.persona_kyc_success]: `when the onComplete callback is called for a Persona inquiry with success status`,
  [CICOEvents.persona_kyc_failed]: `when the onComplete callback is called for a Persona inquiry with failed status`,
  [CICOEvents.persona_kyc_cancel]: `when the onCancelled callback is called for a Persona inquiry`,
  [CICOEvents.persona_kyc_error]: `when the onError callback is called for a Persona inquiry`,
  [DappExplorerEvents.dapp_impression]: `when a dapp shows up in the featured section of the app`,
  [DappExplorerEvents.dapp_open]: `when a dapp is opened`,
  [DappExplorerEvents.dapp_close]: `when a dapp is closed from the in-app dapp web view`,
  [DappExplorerEvents.dapp_screen_open]: ``,
  [DappExplorerEvents.dapp_view_all]: `when user taps "view all dapps" from recently used dapps section`,
  [DappExplorerEvents.dapp_favorite]: `when user favorites a dapp`,
  [DappExplorerEvents.dapp_unfavorite]: `when user unfavorites a dapp`,
  [DappExplorerEvents.dapp_filter]: `when a user taps on a filter`,
  [DappExplorerEvents.dapp_explore_all]: `when a user taps on the explore all button`,
  [WebViewEvents.webview_more_options]: `when user taps "triple dot icon" from the webview`,
  [WebViewEvents.webview_open_in_browser]: `when user taps "Open in External Browser" from the webview options`,
  [CoinbasePayEvents.coinbase_pay_flow_start]: `When user is navigated to Coinbase Pay experience`,
  [CoinbasePayEvents.coinbase_pay_flow_exit]: `When user exits Coinbase Pay`,
  [SwapEvents.swap_screen_open]: `When the screen is mounted`,
  [SwapEvents.swap_screen_select_token]: `When a user selects a token, prompting the token select bottom sheet`,
  [SwapEvents.swap_screen_confirm_token]: `When a user selects a token from the bottom sheet`,
  [SwapEvents.swap_screen_max_swap_amount]: `when a user taps on the "max" button to swap their whole balance`,
  [SwapEvents.swap_review_submit]: `When a user click on the confirm swap button to proceed to next step`,
  [SwapEvents.swap_gas_fees_learn_more]: `When a user taps on the learn more text on the max swap amount warning`,
  [SwapEvents.swap_execute_success]: `When the swap is executed successfully`,
  [SwapEvents.swap_execute_error]: `When the swap returns an error`,
  [SwapEvents.swap_learn_more]: `When a user taps on the learn more button on the swap screen`,
  [SwapEvents.swap_price_impact_warning_displayed]: `When the price impact warning is displayed`,
  [SwapEvents.swap_show_info]: `When a user taps an info icon to show more information on the swap screen`,
  [SwapEvents.swap_show_fund_your_wallet]: `When "Fund your wallet" bottom sheet is displayed`,
  [SwapEvents.swap_add_funds]: `When user taps "Add funds" button is "Fund your wallet" bottom sheet`,
  [SwapEvents.swap_switch_tokens]: `When a user taps the button to switch the to and from tokens`,
  [CeloNewsEvents.celo_news_screen_open]: `When the screen is mounted`,
  [CeloNewsEvents.celo_news_article_tap]: `When a user taps on a news article`,
  [CeloNewsEvents.celo_news_bottom_read_more_tap]: `When a user taps on the read more button at the bottom of the screen`,
  [CeloNewsEvents.celo_news_retry_tap]: `When a user taps on the retry button`,
  [TokenBottomSheetEvents.search_token]: `When a user searches a token using the token bottom sheet search box`,
  [TokenBottomSheetEvents.token_selected]: `A token was selected in TokenBottomSheet.`,
  [TokenBottomSheetEvents.toggle_tokens_filter]: `A filter was selected in the TokenBottomSheet.`,
  [TokenBottomSheetEvents.network_filter_updated]: `The network filter was updated and the multiselect UI closed in the TokenBottomSheet.`,
  [AssetsEvents.show_asset_balance_info]: `When a user taps on the info icon`,
  [AssetsEvents.view_wallet_assets]: `When a user taps on the "Wallet Assets" segmented control or "Assets" tab`,
  [AssetsEvents.view_collectibles]: `When a user taps on the "Collectibles" tab`,
  [AssetsEvents.view_dapp_positions]: `When a user taps on the "Dapp Positions" segmented control or tab`,
  [AssetsEvents.tap_asset]: `When a user taps on an asset`,
  [AssetsEvents.tap_claim_rewards]: `When a user taps on the "Claim Rewards" button`,
  [AssetsEvents.tap_token_details_action]: `When a user taps one of the actions on the token details screen`,
  [AssetsEvents.tap_token_details_bottom_sheet_action]: `When a user taps one of the actions on the more actions bottom sheet`,
  [AssetsEvents.tap_token_details_learn_more]: `When a user taps the learn more link on the token details screen`,
  [AssetsEvents.import_token_screen_open]: `When a user taps on the "Import" top bar button in the Assets screen`,
  [AssetsEvents.import_token_submit]: `When a user taps on the "Import" button in the Import Token screen`,
  [AssetsEvents.import_token_paste]: `When a user taps on the "Paste" button in the Import Token screen`,
  [AssetsEvents.import_token_error]: `When a user enters token address and validation fails in the Import Token screen`,
  [NftEvents.nft_error_screen_open]: `When the high level error screen is mounted`,
  [NftEvents.nft_media_load]: `When attempting to load NFT media`,
  [BuilderHooksEvents.hooks_enable_preview_propose]: `When a user scans a QR code or opens a deep link to enable hooks preview`,
  [BuilderHooksEvents.hooks_enable_preview_cancel]: `When a user cancels the hooks preview flow`,
  [BuilderHooksEvents.hooks_enable_preview_confirm]: `When a user confirms enabling hooks preview`,
  [BuilderHooksEvents.hooks_enable_preview_error]: `When a user encounters an error enabling hooks preview`,
  [BuilderHooksEvents.hooks_disable_preview]: `When a user disables hooks preview`,
  [DappShortcutsEvents.dapp_shortcuts_rewards_screen_open]: `When the rewards screen is mounted`,
  [DappShortcutsEvents.dapp_shortcuts_reward_claim_start]: `When the claim button is pressed`,
  [DappShortcutsEvents.dapp_shortcuts_reward_claim_success]: `When the claim shortcut succeeds`,
  [DappShortcutsEvents.dapp_shortcuts_reward_claim_error]: `When the claim shortcut fails`,
  [DappShortcutsEvents.dapp_shortcuts_reward_tx_propose]: `When the user is shown the transaction details via the bottom sheet`,
  [DappShortcutsEvents.dapp_shortcuts_reward_tx_copy]: `When the user copies the transaction details via the bottom sheet`,
  [DappShortcutsEvents.dapp_shortcuts_reward_tx_accepted]: `When the user confirms the transaction via the bottom sheet`,
  [DappShortcutsEvents.dapp_shortcuts_reward_tx_rejected]: `When the user rejects the transaction via the bottom sheet`,
  [TransactionDetailsEvents.transaction_details_tap_details]: `When a user press 'Details' on transaction details page`,
  [TransactionDetailsEvents.transaction_details_tap_check_status]: `When a user press 'Check status' on transaction details page`,
  [TransactionDetailsEvents.transaction_details_tap_retry]: `When a user press 'Retry' on transaction details page`,
  [TransactionDetailsEvents.transaction_details_tap_block_explorer]: `When a user press 'View on block explorer' on transaction details page`,

  // Events related to earn program
  [EarnEvents.earn_cta_press]: `When a user taps on the earn your stablecoins CTA on the discover tab (only for MVP w/ AAVE)`,
  [EarnEvents.earn_entrypoint_press]: `When a user taps on the earn your stablecoins entrypoint on the discover tab (only for multiple pools)`,
  [EarnEvents.earn_add_crypto_action_press]: `When a user in the Earn flow enters an amount higher than their balance and chooses an option to add crypto`,
  [EarnEvents.earn_deposit_provider_info_press]: `When a user taps on the info icon next to the provider name on the deposit bottom sheet`,
  [EarnEvents.earn_deposit_terms_and_conditions_press]: `When a user taps on the terms and conditions link on the deposit bottom sheet`,
  [EarnEvents.earn_deposit_complete]: `When a user taps on the complete button on the deposit bottom sheet`,
  [EarnEvents.earn_deposit_cancel]: `When a user taps on the cancel button on the deposit bottom sheet`,
  [EarnEvents.earn_deposit_submit_start]: `When the wallet is about to submit the deposit transaction to the network`,
  [EarnEvents.earn_deposit_submit_success]: `When the deposit transaction succeeds`,
  [EarnEvents.earn_deposit_submit_error]: `When the deposit transaction fails`,
  [EarnEvents.earn_deposit_submit_cancel]: `When the user cancels the deposit after submitting by cancelling PIN input`,
  [EarnEvents.earn_view_pools_press]: `When the user taps on the view pools button from token details`,
  [EarnEvents.earn_enter_amount_info_press]: `When a user taps on the info icon on the earn enter amount screen`,
  [EarnEvents.earn_enter_amount_continue_press]: `When a user taps continue on the earn enter amount`,
  [EarnEvents.earn_enter_amount_info_more_pools]: `When a user taps to see other Aave pools`,
  [EarnEvents.earn_exit_pool_press]: `When the user taps on the exit pool button from the earn card in discover tab`,
  [EarnEvents.earn_deposit_more_press]: `When the user taps deposit more button from the earn card in discover tab`,
  [EarnEvents.earn_deposit_add_gas_press]: `When the user doesn't have enough for gas when trying to deposit and clicks on the button to add gas token`,
  [EarnEvents.earn_feed_item_select]: `When the users taps on an earn transaction feed item`,
  [EarnEvents.earn_collect_earnings_press]: `When the user taps on the collect earnings button in the collect screen`,
  [EarnEvents.earn_withdraw_submit_start]: `When the wallet is about to submit the withdraw and claim transactions to the network`,
  [EarnEvents.earn_withdraw_submit_success]: `When the withdraw and claim transactions succeed`,
  [EarnEvents.earn_withdraw_submit_error]: `When the withdraw and claim transactions fail`,
  [EarnEvents.earn_withdraw_submit_cancel]: `When the user cancels the withdraw and claim transactions after submitting by cancelling PIN input`,
  [EarnEvents.earn_withdraw_add_gas_press]: `When the user doesn't have enough for gas and clicks on the button to add gas token`,
  [EarnEvents.earn_info_learn_press]: `When the user taps 'Learn More' on the earn info page`,
  [EarnEvents.earn_info_earn_press]: `When the user taps 'Start Earning' on the earn info page `,
  [EarnEvents.earn_active_pools_card_press]: `When the user taps on the active pool card in discover tab.`,
  [EarnEvents.earn_home_learn_more_press]: `When the user taps 'Learn more' on the earn home screen`,
  [EarnEvents.earn_pool_card_press]: `When the user taps on a pool card`,
  [EarnEvents.earn_home_error_try_again]: `When the user taps try again on the earn home screen after an error loading pools`,
  [EarnEvents.earn_pool_info_view_pool]: `When the user taps 'View Pool' on the earn pool info screen`,
  [EarnEvents.earn_pool_info_tap_info_icon]: `When the user taps an info icon on the earn pool info screen`,
  [EarnEvents.earn_pool_info_tap_withdraw]: `When the user taps the withdraw button on the pool info screen`,
  [EarnEvents.earn_pool_info_tap_deposit]: `When the user taps the deposit button on the pool info screen`,

  // Legacy event docs
  //  The below events had docs, but are no longer produced by the latest app version.
  // [HomeEvents.home_send]: `when "send" button is pressed from home screen send or request bar (NOT from home screen actions)`,
  // [HomeEvents.view_nft_home_assets]: `When "NFTs" is clicked in Home Assets Pages`,
  // [DappExplorerEvents.dapp_open_info]: `when a user taps on the help icon`,
  // [DappExplorerEvents.dapp_open_more_info]: `when a user taps on the "more" button from inside the help bottom sheet`,
  // [DappExplorerEvents.dapp_search]: `when a user searches on the dapp explorer screen`,
  // [DappExplorerEvents.dapp_rankings_impression]: `when the dapp rankings card shows up`,
  // [DappExplorerEvents.dapp_rankings_open]: `when a user taps on the dapp rankings card`,
  // [WalletConnectEvents.wc_request_details]: `when user presses the button to show details of a dapp request`,
  // [CeloExchangeEvents.celo_withdraw_review]: `when ‘review’ is clicked on the withdraw amount screen`,
  // [CeloExchangeEvents.celo_withdraw_edit]: `when ‘edit’ is clicked on the review screen`,
  // [CeloExchangeEvents.celo_withdraw_cancel]: `when ’cancel’ is clicked on the review screen`,
  // [CeloExchangeEvents.celo_withdraw_confirm]: `when ‘withdraw’ is clicked on the review screen`,
  // [CeloExchangeEvents.celo_withdraw_error]: `when there's an error on the withdrawal transaction`,
  // [CeloExchangeEvents.celo_home_info]: `when the (i) next to Celo Gold price is clicked, launching education (not pictured)`,
  // [CeloExchangeEvents.celo_chart_tapped]: `when user clicks the chart on exchange screen`,
  // [NftEvents.nft_gallery_screen_open]: `When the gallery screen is mounted`,
  // [PhoneVerificationEvents.phone_verification_input_help_skip]: `when the user presses skip on the help dialog to skip verification`,
  // [PhoneVerificationEvents.phone_verification_skip]: `when skip is pressed in the phone number input screen`,
  // [IdentityEvents.contacts_connect]: `when connect button is pressed`,
  // [RequestEvents.request_scan]: `when scan QR icon is selected from the request screen`,
  // [RequestEvents.request_select_recipient]: `when recipient was selected`,
  // [RequestEvents.request_cancel]: `when cancel is clicked after launching request flow`,
  // [RequestEvents.request_amount_back]: `back button pressed on amount screen`,
  // [RequestEvents.request_amount_continue]: `when next button pressed on amount enter page`,
  // [RequestEvents.request_confirm_back]: `when back button pressed on request confirmation screen`,
  // [RequestEvents.request_confirm_request]: `when request button pressed on request confirmation screen`,
  // [RequestEvents.request_error]: `when there is an error requesting a transaction`,
  // [FiatExchangeEvents.cico_currency_chosen]: `User selects a currency and taps next`,
  // [FiatExchangeEvents.cico_currency_back]: `User presses the back button from the currency screen`,
  // [DappKitEvents.dappkit_parse_deeplink_error]: `when dappkit fails to parse the deeplink`,
  // [DappKitEvents.dappkit_request_propose]: `when the dappkit request screen is displayed to accept/deny a dapp request`,
  // [DappKitEvents.dappkit_request_cancel]: `when user presses the button to cancel the dapp request`,
  // [DappKitEvents.dappkit_copy_request_details]: `when user presses the button to copy details of a dapp request`,
  // [DappKitEvents.dappkit_request_accept_start]: `when user presses the button to accept a dapp request`,
  // [DappKitEvents.dappkit_request_accept_success]: `when the dapp request succeeds`,
  // [DappKitEvents.dappkit_request_accept_error]: `when the dapp request fails`,
  // [KeylessBackupEvents.cab_sign_in_with_google]: ``, renamed to cab_sign_in_start when we started supporting Apple sign in
  // [KeylessBackupEvents.cab_sign_in_with_google_success]: ``, renamed to cab_sign_in_success when we started supporting Apple sign in
  // [EarnEvents.earn_pool_card_cta_press]: `When the user taps a cta button on the pool card`,
  // [EarnEvents.earn_active_pools_cta_press]: `cta buttons on the card were removed and replaced with a single card press event`,
}
