# adapted from https://github.com/CircleCI-Public/circleci-demo-react-native
# and https://github.com/facebook/react-native/blob/master/.circleci/config.yml

version: 2.1
reference:
  workspace: &workspace ~/app
  ## Configurations
  android_config: &android_config
    working_directory: *workspace
    macos:
      # This is the last version that has openjdk 8
      # On newer openjdk (11) we get the following error when running sdkmanager
      # `Exception in thread "main" java.lang.NoClassDefFoundError: javax/xml/bind/annotation/XmlSchema`
      # See https://circleci.com/docs/2.0/testing-ios/#supported-xcode-versions
      xcode: '11.5.0'
    shell: /bin/bash --login -eo pipefail
    environment:
      TERM: dumb
      GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.parallel=false -Dorg.gradle.configureondemand=true -Dorg.gradle.jvmargs="-Xmx4096m -XX:+HeapDumpOnOutOfMemoryError"'

defaults: &defaults
  working_directory: ~/app
  docker:
    - image: cimg/node:12.22.1
  environment:
    # To avoid ENOMEM problem when running node
    NODE_OPTIONS: '--max-old-space-size=4096'

e2e-defaults: &e2e-defaults
  <<: *defaults
  docker:
    - image: celohq/circleci:geth1.9-2
  environment:
    CELO_BLOCKCHAIN_BRANCH_TO_TEST: master
general:
  artifacts:
    - 'mobile/coverage'
    - 'protocol/coverage'

commands:
  yarn_install:
    steps:
      - run:
          name: Create cache checksum files
          command: |
            mkdir -p ~/.tmp/checksumfiles
            # Concatenate package.json so we can use them as a part of the cache key
            find . -maxdepth 5 -type f -name 'package.json' -not -path "*node_modules*" -print0 | sort -z | xargs -0 cat > ~/.tmp/checksumfiles/package.json
            # Concatenate patches so we can use them as a part of the cache key
            find ./patches -type f -name '*.patch' -print0 | sort -z | xargs -0 cat > ~/.tmp/checksumfiles/patches
      - restore_cache:
          name: Restore cached node_modules
          keys:
            # Using a single cache key here as we don't want to fallback on restoring node_modules produced
            # by a different yarn.lock and patches
            - node_modules-v4-{{ arch }}-{{ checksum "yarn.lock" }}-{{ checksum "~/.tmp/checksumfiles/package.json" }}-{{ checksum "~/.tmp/checksumfiles/patches" }}
      - run:
          name: Extract cached node_modules (if present)
          command: |
            if [ -e ~/.tmp/node_modules.tgz ]; then
              tar -xf ~/.tmp/node_modules.tgz
            else
              # Dependencies have changed, create beacon file used by the install and check licenses steps
              touch ~/.tmp/yarn_deps_have_changed
            fi
      - run:
          name: Install dependencies
          command: |
            if [ ! -e ~/.tmp/yarn_deps_have_changed ]; then
              # Though `yarn install` is instantaneous with up-to-date node_modules which is the case when we've restored cached node_modules,
              # there's currently a bug with the generated node_modules/.yarn-integrity file which is apparently not entirely stable
              # for a given `yarn.lock`, through different runs of `yarn install`
              # This causes the `yarn check --integrity` step to fail
              # and hence `yarn install` has to redo all the work again (taking unnecessary time, and making the current cache useless)
              # See https://github.com/yarnpkg/yarn/issues/6703
              # So here to workaround this issue, we skip the install if dependencies haven't changed
              echo "Skipping install, dependencies haven't changed"
              # We still have to run postinstall though
              yarn run postinstall
              exit 0
            fi

            # Deals with yarn install flakiness which can come due to yarnpkg.com being
            # unreliable. For example, https://circleci.com/gh/celo-org/celo-monorepo/82685
            yarn install || yarn install || yarn install
      - run:
          name: Fail if someone forgot to commit "yarn.lock"
          command: |
            if [[ $(git status --porcelain) ]]; then
              git --no-pager diff
              echo "There are git differences after running yarn install"
              exit 1
            fi

      # Workaround save_cache not supporting globbing for the paths key
      # see note in https://circleci.com/docs/2.0/caching/#basic-example-of-dependency-caching and https://ideas.circleci.com/ideas/CCI-I-239
      - run:
          name: Create cached node_modules (if necessary)
          command: |
            if [ ! -e ~/.tmp/node_modules.tgz ]; then
              tar -c node_modules/ packages/*/node_modules/ | gzip --fast > ~/.tmp/node_modules.tgz
            fi
      - save_cache:
          name: Save cached node_modules
          key: node_modules-v4-{{ arch }}-{{ checksum "yarn.lock" }}-{{ checksum "~/.tmp/checksumfiles/package.json" }}-{{ checksum "~/.tmp/checksumfiles/patches" }}
          paths:
            - ~/.tmp/node_modules.tgz

  install_rsync:
    steps:
      - run:
          name: Install rsync
          command: |
            sudo apt-get update -y && sudo apt-get install rsync -y

jobs:
  install_dependencies:
    <<: *defaults
    # Source: https://circleci.com/docs/2.0/configuration-reference/#resource_class
    resource_class: large
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
            - source-v1-{{ .Branch }}-
            - source-v1-

      - checkout

      - save_cache:
          key: source-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - '.git'

      - run:
          name: Verify setup for incremental testing
          command: |
            set -euo pipefail
            cd ~/app
            set -v
            # To get the "main" branch mapping
            git checkout main
            git checkout ${CIRCLE_BRANCH}
            # Verify that following commands work, they are later called in the incremental testing script
            # There output does not matter here, the fact that they finish successfully does.
            git rev-parse --abbrev-ref HEAD

      - attach_workspace:
          at: ~/app

      - install_rsync

      - yarn_install

      - run:
          name: Build packages
          command: |
            yarn build --ignore docs

      - run:
          name: Check licenses
          command: |
            if [ ! -e ~/.tmp/yarn_deps_have_changed ]; then
              # Internally `yarn check-licenses` downloads dependencies into its cache again even if node_modules are up-to-date
              # which happens when we've restored our cached node_modules.
              # Making `yarn check-licenses` take ~45secs instead of ~3secs (depending on network conditions and build machine)
              # So here we skip checking when it's unnecessary
              echo "Skipping checking licenses, dependencies haven't changed"
              exit 0
            fi
            yarn check-licenses

      - persist_to_workspace:
          root: .
          paths:
            - .

  mobile-test:
    <<: *defaults
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/app

      - install_rsync

      - run:
          name: Ensure translations are not missing
          command: |
            if [[ "$CIRCLE_BRANCH" != l10n/* ]]; then
              # We want to check translations only when they are complete
              echo "Skipping translations check on non l10n branches"
              exit 0
            fi
            cd packages/mobile
            yarn --cwd packages/mobile test:verify-locales

      - run:
          name: jest tests
          command: |
            mkdir -p test-results/jest
            # Tests fail with https://stackoverflow.com/questions/38558989/node-js-heap-out-of-memory without this
            NODE_OPTIONS="--max-old-space-size=4096" yarn --cwd packages/mobile test:ci --runInBand
          environment:
            JEST_JUNIT_OUTPUT: test-results/jest/junit.xml

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: packages/mobile/coverage
          destination: mobile/coverage

      - run:
          name: copy
          command: |
            mkdir -p packages/mobile/mobile/coverage
            cp -r packages/mobile/coverage packages/mobile/mobile/
      - run:
          name: Upload to CodeCov
          command: yarn codecov -F mobile

  flakey-test-summary:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Add summary of flakey tests to GitHub Checks
          command: |
            node ./packages/flake-tracker/scripts/summary.js

workflows:
  version: 2
  celo-monorepo-build:
    jobs:
      - install_dependencies
      - mobile-test:
          requires:
            - install_dependencies
      - flakey-test-summary:
          requires:
            - mobile-test
