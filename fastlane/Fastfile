fastlane_version '2.94.0'

default_platform(:android)

def get_app_bundle_id(env)
  Dotenv.parse("../.env.#{env}")['APP_BUNDLE_ID']
end

def fastlane_emerge(environment:, file_path:)
  # Note: this requires the EMERGE_API_TOKEN env var to be set
  emerge(
    file_path: file_path,
    repo_name: "valora-inc/wallet",
    sha: `git rev-parse HEAD`.strip,
    branch: `git branch --show-current`.strip,
    build_type: environment,
  )
end

platform :android do

  # Android Lanes

  desc 'Clean the Android application'
  lane :clean do
    gradle(task: 'clean', project_dir: 'android/')
  end

  desc 'Build the Android application - requires environment param'
  lane :build do |options|
    clean
    environment = options[:environment].capitalize
    if options[:buildApk]
      ENV["GRADLE_OPTS"] = '-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-Xmx10000m -XX:+HeapDumpOnOutOfMemoryError"'
      gradle(task: 'assemble', build_type: 'Release', flavor: environment, project_dir: 'android/')
    else
      ENV["GRADLE_OPTS"] = '-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-Xmx10000m -XX:+HeapDumpOnOutOfMemoryError"'
      gradle(task: 'bundle', build_type: 'Release', flavor: environment, project_dir: 'android/')
    end
  end

  desc 'Upload to the Play Store'
  lane :upload do |options|
    env = options[:environment]
    track = options[:track]

    supply(
      json_key: 'fastlane/google-play-service-account.json',
      track: track,
      track_promote_to: track,
      package_name: get_app_bundle_id(env),
      mapping: lane_context[SharedValues::GRADLE_MAPPING_TXT_OUTPUT_PATH],
      skip_upload_apk: true,
      skip_upload_metadata: true,
      skip_upload_changelogs: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )

    fastlane_emerge(
      environment: env, 
      file_path: lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH],
    )
  end

  desc 'Ship Alfajores to Playstore Internal'
  lane :alfajores do
    env = 'alfajores'
    build(environment: env)
    upload(environment: env, track: 'internal')
  end

  desc 'Ship Alfajores Nightly to Playstore Internal'
  lane :alfajoresnightly do
    env = 'alfajoresnightly'
    build(environment: env)
    upload(environment: env, track: 'internal')
  end

  desc 'Ship Mainnet to Playstore Internal'
  lane :mainnet do
    env = 'mainnet'
    build(environment: env)
    upload(environment: env, track: 'internal')
  end

  desc 'Ship Mainnet Nightly to Playstore Internal'
  lane :mainnetnightly do
    env = 'mainnetnightly'
    build(environment: env)
    upload(environment: env, track: 'internal')
  end

  desc 'Build an Android apk'
  lane :build_apk do |options|
    env = options[:env]
    build(environment: env, buildApk: true)
  end

  desc 'Build an Android bundle'
  lane :build_bundle do |options|
    env = options[:env]
    build(environment: env)
  end
end

platform :ios do

  desc 'Build the iOS application - requires environment param'
  lane :build do |options|
    gym(
      workspace: 'ios/celo.xcworkspace',
      # Needs double quotes because Ruby differentiates
      # https://stackoverflow.com/questions/6395288/double-vs-single-quotes
      scheme: "celo-#{options[:environment]}",
      configuration: 'Release',
      xcargs: [
        "-allowProvisioningUpdates",
        "-authenticationKeyPath #{ENV['APPLE_CONNECT_CERTIFICATE_PATH']}",
        "-authenticationKeyID #{ENV['APPLE_CONNECT_KEY_ID']}",
        "-authenticationKeyIssuerID #{ENV['APPLE_CONNECT_ISSUER_ID']}",
      ].join(' '),
      output_directory: 'build',
      # verbose: true
     ) 
  end
  
  desc 'Upload to TestFlight'
  lane :upload do |options|
    api_key = app_store_connect_api_key(
      key_id: "#{ENV['APPLE_CONNECT_KEY_ID']}",
      issuer_id: "#{ENV['APPLE_CONNECT_ISSUER_ID']}",
      # CI path is '/Volumes/Temporary/AuthKey.p8'
      key_filepath: "#{ENV['APPLE_CONNECT_CERTIFICATE_PATH']}",
      duration: 1200,
    )
    
    upload_to_testflight(
      api_key: api_key,
      skip_submission: true,
      skip_waiting_for_build_processing: true,
    )

    fastlane_emerge(
      environment: options[:environment], 
      file_path: lane_context[SharedValues::XCODEBUILD_ARCHIVE],
    )
  end

  desc 'Ship Alfajores to TestFlight'
  lane :alfajores do
    env = 'alfajores'
    build(environment: env)
    upload(environment: env)
  end

  desc 'Ship Alfajores Nightly to TestFlight'
  lane :alfajoresnightly do
    env = 'alfajoresnightly'
    build(environment: env)
    upload(environment: env)
  end

  desc 'Ship Mainnet to TestFlight'
  lane :mainnet do
    env = 'mainnet'
    build(environment: env)
    upload(environment: env)
  end

  desc 'Ship Mainnet Nightly to TestFlight'
  lane :mainnetnightly do
    env = 'mainnetnightly'
    build(environment: env)
    upload(environment: env)
  end

end


